generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  reviews Review[]

  @@map("users")
}

model ServiceType {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  isActive    Boolean @default(true)
  basePrice   Float?
  category    String?

  orders Order[]

  @@map("service_types")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String
  serviceTypeId   String
  title           String
  description     String
  specifications  Json?
  quantity        Int         @default(1)
  urgency         Urgency     @default(NORMAL)
  budget          Float?
  status          OrderStatus @default(PENDING)
  estimatedPrice  Float?
  finalPrice      Float?
  estimatedDays   Int?
  actualDays      Int?
  notes           String?
  adminNotes      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?

  customer    User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id])
  files       OrderFile[]
  reviews     Review[]

  @@map("orders")
}

model OrderFile {
  id          String   @id @default(cuid())
  orderId     String
  fileName    String
  originalName String
  fileUrl     String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_files")
}

model Review {
  id        String   @id @default(cuid())
  orderId   String   @unique
  customerId String
  rating    Int
  comment   String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer User  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_items")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  IN_REVIEW
  QUOTED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum Urgency {
  LOW
  NORMAL
  HIGH
  URGENT
}
