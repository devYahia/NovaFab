Deployment Log
Hide Debug Logs
Deployment is Finished.


2025-Oct-05 20:56:44.819215
Starting deployment of devYahia/NovaFab:main to localhost.
2025-Oct-05 20:56:45.668048
Preparing container with helper image: ghcr.io/coollabsio/coolify-helper:1.0.11.
2025-Oct-05 20:56:46.083728
[CMD]: docker stop --time=30 jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:56:46.083728
Error response from daemon: No such container: jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:56:46.505510
[CMD]: docker rm -f jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:56:46.505510
Error response from daemon: No such container: jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:56:47.023295
[CMD]: docker run -d --network coolify --name jw4s0gk8kosk0g4gcwcw0k8g  --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/coollabsio/coolify-helper:1.0.11
2025-Oct-05 20:56:47.023295
4d1e30d29f04c20a33c7359738c182f006a31c9e2810cc7fbfd5f7056eea23f6
2025-Oct-05 20:56:48.732795
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'GIT_SSH_COMMAND="ssh -o ConnectTimeout=30 -p 22 -o Port=22 -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git ls-remote https://github.com/devYahia/NovaFab refs/heads/main'
2025-Oct-05 20:56:48.732795
b80c32f6d3e64f0bf61dc68c85a66ac3b8346247	refs/heads/main
2025-Oct-05 20:56:48.760861
----------------------------------------
2025-Oct-05 20:56:48.770547
Importing devYahia/NovaFab:main (commit sha HEAD) to /artifacts/jw4s0gk8kosk0g4gcwcw0k8g.
2025-Oct-05 20:56:49.251271
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'git clone --depth=1 --recurse-submodules --shallow-submodules -b 'main' 'https://github.com/devYahia/NovaFab' '/artifacts/jw4s0gk8kosk0g4gcwcw0k8g' && cd /artifacts/jw4s0gk8kosk0g4gcwcw0k8g && if [ -f .gitmodules ]; then sed -i "s#git@\(.*\):#https://\1/#g" /artifacts/jw4s0gk8kosk0g4gcwcw0k8g/.gitmodules || true && git submodule sync && GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git submodule update --init --recursive --depth=1; fi && cd /artifacts/jw4s0gk8kosk0g4gcwcw0k8g && GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git lfs pull'
2025-Oct-05 20:56:49.251271
Cloning into '/artifacts/jw4s0gk8kosk0g4gcwcw0k8g'...
2025-Oct-05 20:56:51.373121
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'cd /artifacts/jw4s0gk8kosk0g4gcwcw0k8g && git log -1 b80c32f6d3e64f0bf61dc68c85a66ac3b8346247 --pretty=%B'
2025-Oct-05 20:56:51.373121
Fix Docker deployment: Enable standalone output in next.config.js
2025-Oct-05 20:56:51.373121
2025-Oct-05 20:56:51.373121
- Add output: 'standalone' configuration to next.config.js
2025-Oct-05 20:56:51.373121
- This enables Next.js to generate .next/standalone directory
2025-Oct-05 20:56:51.373121
- Required for Docker deployment to work properly
2025-Oct-05 20:56:51.373121
- Fixes COPY command failure in Dockerfile step 19
2025-Oct-05 20:56:51.830602
[CMD]: docker images -q kgoc40so00cs4w8ksc8o04kg:b80c32f6d3e64f0bf61dc68c85a66ac3b8346247 2>/dev/null
2025-Oct-05 20:56:51.830602
80abb05a68e6
2025-Oct-05 20:56:51.853443
Configuration changed. Rebuilding image.
2025-Oct-05 20:56:54.790593
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'cat /artifacts/jw4s0gk8kosk0g4gcwcw0k8g/Dockerfile'
2025-Oct-05 20:56:54.790593
# Use the official Node.js 18 image as base
2025-Oct-05 20:56:54.790593
FROM node:18-alpine AS base
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Install dependencies only when needed
2025-Oct-05 20:56:54.790593
FROM base AS deps
2025-Oct-05 20:56:54.790593
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
2025-Oct-05 20:56:54.790593
RUN apk add --no-cache libc6-compat
2025-Oct-05 20:56:54.790593
WORKDIR /app
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Install dependencies based on the preferred package manager
2025-Oct-05 20:56:54.790593
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
2025-Oct-05 20:56:54.790593
RUN \
2025-Oct-05 20:56:54.790593
if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
2025-Oct-05 20:56:54.790593
elif [ -f package-lock.json ]; then npm ci; \
2025-Oct-05 20:56:54.790593
elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
2025-Oct-05 20:56:54.790593
else echo "Lockfile not found." && exit 1; \
2025-Oct-05 20:56:54.790593
fi
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Rebuild the source code only when needed
2025-Oct-05 20:56:54.790593
FROM base AS builder
2025-Oct-05 20:56:54.790593
WORKDIR /app
2025-Oct-05 20:56:54.790593
COPY --from=deps /app/node_modules ./node_modules
2025-Oct-05 20:56:54.790593
COPY . .
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Next.js collects completely anonymous telemetry data about general usage.
2025-Oct-05 20:56:54.790593
# Learn more here: https://nextjs.org/telemetry
2025-Oct-05 20:56:54.790593
# Uncomment the following line in case you want to disable telemetry during the build.
2025-Oct-05 20:56:54.790593
ENV NEXT_TELEMETRY_DISABLED=1
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Generate Prisma client
2025-Oct-05 20:56:54.790593
RUN npx prisma generate
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Build the application
2025-Oct-05 20:56:54.790593
RUN \
2025-Oct-05 20:56:54.790593
if [ -f yarn.lock ]; then yarn run build; \
2025-Oct-05 20:56:54.790593
elif [ -f package-lock.json ]; then npm run build; \
2025-Oct-05 20:56:54.790593
elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
2025-Oct-05 20:56:54.790593
else echo "Lockfile not found." && exit 1; \
2025-Oct-05 20:56:54.790593
fi
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Production image, copy all the files and run next
2025-Oct-05 20:56:54.790593
FROM base AS runner
2025-Oct-05 20:56:54.790593
WORKDIR /app
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
ENV NODE_ENV=production
2025-Oct-05 20:56:54.790593
# Uncomment the following line in case you want to disable telemetry during runtime.
2025-Oct-05 20:56:54.790593
ENV NEXT_TELEMETRY_DISABLED=1
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
RUN addgroup --system --gid 1001 nodejs
2025-Oct-05 20:56:54.790593
RUN adduser --system --uid 1001 nextjs
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
COPY --from=builder /app/public ./public
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Set the correct permission for prerender cache
2025-Oct-05 20:56:54.790593
RUN mkdir .next
2025-Oct-05 20:56:54.790593
RUN chown nextjs:nodejs .next
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Automatically leverage output traces to reduce image size
2025-Oct-05 20:56:54.790593
# https://nextjs.org/docs/advanced-features/output-file-tracing
2025-Oct-05 20:56:54.790593
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
2025-Oct-05 20:56:54.790593
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# Copy Prisma schema and generated client
2025-Oct-05 20:56:54.790593
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
2025-Oct-05 20:56:54.790593
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
USER nextjs
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
EXPOSE 3000
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
ENV PORT=3000
2025-Oct-05 20:56:54.790593
# set hostname to localhost
2025-Oct-05 20:56:54.790593
ENV HOSTNAME="0.0.0.0"
2025-Oct-05 20:56:54.790593
2025-Oct-05 20:56:54.790593
# server.js is created by next build from the standalone output
2025-Oct-05 20:56:54.790593
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
2025-Oct-05 20:56:54.790593
CMD ["node", "server.js"]
2025-Oct-05 20:56:55.935810
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'cat /artifacts/jw4s0gk8kosk0g4gcwcw0k8g/Dockerfile'
2025-Oct-05 20:56:55.935810
# Use the official Node.js 18 image as base
2025-Oct-05 20:56:55.935810
FROM node:18-alpine AS base
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Install dependencies only when needed
2025-Oct-05 20:56:55.935810
FROM base AS deps
2025-Oct-05 20:56:55.935810
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
2025-Oct-05 20:56:55.935810
RUN apk add --no-cache libc6-compat
2025-Oct-05 20:56:55.935810
WORKDIR /app
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Install dependencies based on the preferred package manager
2025-Oct-05 20:56:55.935810
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
2025-Oct-05 20:56:55.935810
RUN \
2025-Oct-05 20:56:55.935810
if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
2025-Oct-05 20:56:55.935810
elif [ -f package-lock.json ]; then npm ci; \
2025-Oct-05 20:56:55.935810
elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
2025-Oct-05 20:56:55.935810
else echo "Lockfile not found." && exit 1; \
2025-Oct-05 20:56:55.935810
fi
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Rebuild the source code only when needed
2025-Oct-05 20:56:55.935810
FROM base AS builder
2025-Oct-05 20:56:55.935810
WORKDIR /app
2025-Oct-05 20:56:55.935810
COPY --from=deps /app/node_modules ./node_modules
2025-Oct-05 20:56:55.935810
COPY . .
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Next.js collects completely anonymous telemetry data about general usage.
2025-Oct-05 20:56:55.935810
# Learn more here: https://nextjs.org/telemetry
2025-Oct-05 20:56:55.935810
# Uncomment the following line in case you want to disable telemetry during the build.
2025-Oct-05 20:56:55.935810
ENV NEXT_TELEMETRY_DISABLED=1
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Generate Prisma client
2025-Oct-05 20:56:55.935810
RUN npx prisma generate
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Build the application
2025-Oct-05 20:56:55.935810
RUN \
2025-Oct-05 20:56:55.935810
if [ -f yarn.lock ]; then yarn run build; \
2025-Oct-05 20:56:55.935810
elif [ -f package-lock.json ]; then npm run build; \
2025-Oct-05 20:56:55.935810
elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
2025-Oct-05 20:56:55.935810
else echo "Lockfile not found." && exit 1; \
2025-Oct-05 20:56:55.935810
fi
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Production image, copy all the files and run next
2025-Oct-05 20:56:55.935810
FROM base AS runner
2025-Oct-05 20:56:55.935810
WORKDIR /app
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
ENV NODE_ENV=production
2025-Oct-05 20:56:55.935810
# Uncomment the following line in case you want to disable telemetry during runtime.
2025-Oct-05 20:56:55.935810
ENV NEXT_TELEMETRY_DISABLED=1
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
RUN addgroup --system --gid 1001 nodejs
2025-Oct-05 20:56:55.935810
RUN adduser --system --uid 1001 nextjs
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
COPY --from=builder /app/public ./public
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Set the correct permission for prerender cache
2025-Oct-05 20:56:55.935810
RUN mkdir .next
2025-Oct-05 20:56:55.935810
RUN chown nextjs:nodejs .next
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Automatically leverage output traces to reduce image size
2025-Oct-05 20:56:55.935810
# https://nextjs.org/docs/advanced-features/output-file-tracing
2025-Oct-05 20:56:55.935810
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
2025-Oct-05 20:56:55.935810
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# Copy Prisma schema and generated client
2025-Oct-05 20:56:55.935810
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
2025-Oct-05 20:56:55.935810
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
USER nextjs
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
EXPOSE 3000
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
ENV PORT=3000
2025-Oct-05 20:56:55.935810
# set hostname to localhost
2025-Oct-05 20:56:55.935810
ENV HOSTNAME="0.0.0.0"
2025-Oct-05 20:56:55.935810
2025-Oct-05 20:56:55.935810
# server.js is created by next build from the standalone output
2025-Oct-05 20:56:55.935810
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
2025-Oct-05 20:56:55.935810
CMD ["node", "server.js"]
2025-Oct-05 20:56:56.607614
----------------------------------------
2025-Oct-05 20:56:56.620741
Building docker image started.
2025-Oct-05 20:56:56.634608
To check the current progress, click on Show Debug Logs.
2025-Oct-05 20:56:57.680006
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'cat /artifacts/build.sh'
2025-Oct-05 20:56:57.680006
docker build  --add-host coolify:10.0.1.5 --add-host coolify-db:10.0.1.4 --add-host coolify-realtime:10.0.1.3 --add-host coolify-redis:10.0.1.2 --add-host dg088sgsw8444kgscg8s448g:10.0.1.7 --add-host ggo04s4ogo00kscg8wso4c8k:10.0.1.8 --add-host ngwsgkgk4ko4gsog48kwowc0:10.0.1.9 --network host -f /artifacts/jw4s0gk8kosk0g4gcwcw0k8g/Dockerfile --build-arg SOURCE_COMMIT='b80c32f6d3e64f0bf61dc68c85a66ac3b8346247' --build-arg ADMIN_EMAIL='admin@novafab.com' --build-arg ADMIN_PASSWORD='admin123' --build-arg CLOUDINARY_API_KEY='your-api-key' --build-arg CLOUDINARY_API_SECRET='your-api-secret' --build-arg CLOUDINARY_CLOUD_NAME='your-cloudinary-name' --build-arg DATABASE_URL='postgresql://postgres:xKpLObgvO7EMmHLi3EPngicq30X3Wv6Z90iCTgqKhqddYHNgyphEhtU36tCv8pjc@ngwsgkgk4ko4gsog48kwowc0:5432/postgres' --build-arg HOSTNAME='0.0.0.0' --build-arg NEXT_PUBLIC_APP_URL='https://novafab.duckdns.org' --build-arg NEXT_TELEMETRY_DISABLED='1' --build-arg NEXTAUTH_SECRET='2DjQpM6CP8QJT/Tjf5CCCFfvSlMKRi6cWVMGDKtNfvw=' --build-arg NEXTAUTH_URL='https://novafab.duckdns.org' --build-arg PORT='3000' --build-arg SMTP_HOST='your-smtp-host' --build-arg SMTP_PASS='your-password' --build-arg SMTP_PORT='587' --build-arg SMTP_USER='your-email' --build-arg COOLIFY_BUILD_SECRETS_HASH=c481699dc9505c84c0beccab7d56ae44067480d8395d73186a5d1b0275d0bea7 --build-arg 'COOLIFY_URL=novafab.duckdns.org' --build-arg 'COOLIFY_FQDN=novafab.duckdns.org' --build-arg 'COOLIFY_BRANCH=main' --build-arg 'COOLIFY_RESOURCE_UUID=kgoc40so00cs4w8ksc8o04kg' --build-arg 'COOLIFY_CONTAINER_NAME=kgoc40so00cs4w8ksc8o04kg-205643316983' --progress plain -t kgoc40so00cs4w8ksc8o04kg:b80c32f6d3e64f0bf61dc68c85a66ac3b8346247 /artifacts/jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:56:58.637992
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'bash /artifacts/build.sh'
2025-Oct-05 20:56:58.637992
#0 building with "default" instance using docker driver
2025-Oct-05 20:56:58.637992
2025-Oct-05 20:56:58.637992
#1 [internal] load build definition from Dockerfile
2025-Oct-05 20:56:58.637992
#1 transferring dockerfile: 3.35kB done
2025-Oct-05 20:56:58.637992
#1 DONE 0.0s
2025-Oct-05 20:56:58.637992
2025-Oct-05 20:56:58.637992
#2 [internal] load metadata for docker.io/library/node:18-alpine
2025-Oct-05 20:56:59.238040
#2 DONE 0.8s
2025-Oct-05 20:56:59.350464
#3 [internal] load .dockerignore
2025-Oct-05 20:56:59.350464
#3 transferring context: 1.24kB done
2025-Oct-05 20:56:59.350464
#3 DONE 0.0s
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#4 [base 1/1] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8ca09d9e
2025-Oct-05 20:56:59.350464
#4 DONE 0.0s
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#5 [internal] load build context
2025-Oct-05 20:56:59.350464
#5 transferring context: 1.00MB 0.0s done
2025-Oct-05 20:56:59.350464
#5 DONE 0.0s
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#6 [runner  3/10] RUN adduser --system --uid 1001 nextjs
2025-Oct-05 20:56:59.350464
#6 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#7 [builder 2/5] COPY --from=deps /app/node_modules ./node_modules
2025-Oct-05 20:56:59.350464
#7 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#8 [runner  4/10] COPY --from=builder /app/public ./public
2025-Oct-05 20:56:59.350464
#8 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#9 [runner  5/10] RUN mkdir .next
2025-Oct-05 20:56:59.350464
#9 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#10 [runner  8/10] COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
2025-Oct-05 20:56:59.350464
#10 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#11 [builder 1/5] WORKDIR /app
2025-Oct-05 20:56:59.350464
#11 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#12 [builder 4/5] RUN npx prisma generate
2025-Oct-05 20:56:59.350464
#12 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#13 [builder 3/5] COPY . .
2025-Oct-05 20:56:59.350464
#13 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#14 [builder 5/5] RUN   if [ -f yarn.lock ]; then yarn run build;   elif [ -f package-lock.json ]; then npm run build;   elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build;   else echo "Lockfile not found." && exit 1;   fi
2025-Oct-05 20:56:59.350464
#14 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#15 [runner  9/10] COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
2025-Oct-05 20:56:59.350464
#15 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#16 [runner  2/10] RUN addgroup --system --gid 1001 nodejs
2025-Oct-05 20:56:59.350464
#16 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#17 [runner  7/10] COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
2025-Oct-05 20:56:59.350464
#17 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#18 [runner  6/10] RUN chown nextjs:nodejs .next
2025-Oct-05 20:56:59.350464
#18 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#19 [deps 1/4] RUN apk add --no-cache libc6-compat
2025-Oct-05 20:56:59.350464
#19 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#20 [deps 4/4] RUN   if [ -f yarn.lock ]; then yarn --frozen-lockfile;   elif [ -f package-lock.json ]; then npm ci;   elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile;   else echo "Lockfile not found." && exit 1;   fi
2025-Oct-05 20:56:59.350464
#20 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#21 [deps 2/4] WORKDIR /app
2025-Oct-05 20:56:59.350464
#21 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#22 [deps 3/4] COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
2025-Oct-05 20:56:59.350464
#22 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#23 [runner 10/10] COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
2025-Oct-05 20:56:59.350464
#23 CACHED
2025-Oct-05 20:56:59.350464
2025-Oct-05 20:56:59.350464
#24 exporting to image
2025-Oct-05 20:56:59.350464
#24 exporting layers done
2025-Oct-05 20:56:59.350464
#24 writing image sha256:80abb05a68e6349a5f866216ec3e6b4263825c06e66fe0a55d56c99cb751d40b done
2025-Oct-05 20:56:59.350464
#24 naming to docker.io/library/kgoc40so00cs4w8ksc8o04kg:b80c32f6d3e64f0bf61dc68c85a66ac3b8346247 done
2025-Oct-05 20:56:59.350464
#24 DONE 0.0s
2025-Oct-05 20:56:59.394762
Building docker image completed.
2025-Oct-05 20:56:59.404353
----------------------------------------
2025-Oct-05 20:56:59.412184
Rolling update started.
2025-Oct-05 20:57:00.112400
[CMD]: docker exec jw4s0gk8kosk0g4gcwcw0k8g bash -c 'SOURCE_COMMIT=b80c32f6d3e64f0bf61dc68c85a66ac3b8346247 COOLIFY_URL=novafab.duckdns.org COOLIFY_FQDN= COOLIFY_BRANCH=main  docker compose --project-name kgoc40so00cs4w8ksc8o04kg --project-directory /artifacts/jw4s0gk8kosk0g4gcwcw0k8g -f /artifacts/jw4s0gk8kosk0g4gcwcw0k8g/docker-compose.yaml up --build -d'
2025-Oct-05 20:57:00.112400
time="2025-10-05T20:57:00Z" level=warning msg="Found orphan containers ([kgoc40so00cs4w8ksc8o04kg-203606379951]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
2025-Oct-05 20:57:00.112400
Container kgoc40so00cs4w8ksc8o04kg-205643316983  Creating
2025-Oct-05 20:57:00.187636
kgoc40so00cs4w8ksc8o04kg-205643316983 Your kernel does not support memory swappiness capabilities or the cgroup is not mounted. Memory swappiness discarded.
2025-Oct-05 20:57:00.192153
Container kgoc40so00cs4w8ksc8o04kg-205643316983  Created
2025-Oct-05 20:57:00.196232
Container kgoc40so00cs4w8ksc8o04kg-205643316983  Starting
2025-Oct-05 20:57:00.541769
Container kgoc40so00cs4w8ksc8o04kg-205643316983  Started
2025-Oct-05 20:57:00.576996
New container started.
2025-Oct-05 20:57:00.588500
Removing old containers.
2025-Oct-05 20:57:01.697991
[CMD]: docker stop --time=30 kgoc40so00cs4w8ksc8o04kg-203606379951
2025-Oct-05 20:57:01.697991
kgoc40so00cs4w8ksc8o04kg-203606379951
2025-Oct-05 20:57:02.167719
[CMD]: docker rm -f kgoc40so00cs4w8ksc8o04kg-203606379951
2025-Oct-05 20:57:02.167719
kgoc40so00cs4w8ksc8o04kg-203606379951
2025-Oct-05 20:57:02.187394
Rolling update completed.
2025-Oct-05 20:57:03.510586
Gracefully shutting down build container: jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:57:04.122564
[CMD]: docker stop --time=30 jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:57:04.122564
jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:57:04.552630
[CMD]: docker rm -f jw4s0gk8kosk0g4gcwcw0k8g
2025-Oct-05 20:57:04.552630
Error response from daemon: No such container: jw4s0gk8kosk0g4gcwcw0k8g


Environment Variables
+ Add
Normal view
Environment variables (secrets) for this resource.
Sort alphabetically
Use Docker Build Secrets
Production Environment Variables
ADMIN_EMAIL=admin@novafab.com
ADMIN_PASSWORD=admin123
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
CLOUDINARY_CLOUD_NAME=your-cloudinary-name
DATABASE_URL=postgresql://postgres:xKpLObgvO7EMmHLi3EPngicq30X3Wv6Z90iCTgqKhqddYHNgyphEhtU36tCv8pjc@ngwsgkgk4ko4gsog48kwowc0:5432/postgres
HOSTNAME=0.0.0.0
NEXT_PUBLIC_APP_URL=https://novafab.duckdns.org
NEXT_TELEMETRY_DISABLED=1
NEXTAUTH_SECRET=2DjQpM6CP8QJT/Tjf5CCCFfvSlMKRi6cWVMGDKtNfvw=
NEXTAUTH_URL=https://novafab.duckdns.org
NODE_ENV=production
PORT=3000
SMTP_HOST=your-smtp-host
SMTP_PASS=your-password
SMTP_PORT=587
SMTP_USER=your-email
Preview Deployments Environment Variables



Configuration
NovaFab
production
NovaFab
Running

Configuration
Deployments
Logs
Terminal

Links

Advanced
Redeploy
Restart
Stop
General
Advanced
Environment Variables
Persistent Storage
Git Source
Servers
Scheduled Tasks
Webhooks
Preview Deployments
Healthcheck
Rollback
Resource Limits
Resource Operations
Metrics
Tags
Danger Zone
General
Save
General configuration for your application.
Name
*
NovaFab
Description
Build Pack
*

Dockerfile
Domains
novafab.duckdns.org
Generate Domain
Direction
*

Allow www & non-www.

Set Direction
Docker Registry
Docker Image
Empty means it won't push the image to a docker registry.
Docker Image Tag
Empty means only push commit sha tag.
Build
Base Directory
/
Dockerfile Location
/Dockerfile
Docker Build Stage Target
Custom Docker Options
--cap-add SYS_ADMIN --device=/dev/fuse --security-opt apparmor:unconfined --ulimit nofile=1024:1024 --tmpfs /run:rw,noexec,nosuid,size=65536k --hostname=myapp
Use a Build Server?
Network
Ports Exposes
*
3000
Ports Mappings
3000:3000
Network Aliases
HTTP Basic Authentication
Enable
Container Labels
16
Readonly labels
Escape special characters in labels?
Reset Labels to Defaults
Pre/Post Deployment Commands
Pre-deployment
php artisan migrate
Post-deployment
